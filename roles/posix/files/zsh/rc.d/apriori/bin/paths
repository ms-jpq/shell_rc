#!/usr/bin/env -S -- bash -Eeuo pipefail -O dotglob -O failglob -O globstar

OPTS='sr'
LONG_OPTS='silent,relative'
eval set -- "$(getopt --options="$OPTS" --longoptions="$LONG_OPTS" --name="$0" -- "$@")"

SILENT=0
RELATIVE=0

while true; do
  case "$1" in
  -r | --relative)
    RELATIVE=1
    shift
    ;;
  -s | --silent)
    SILENT=1
    shift
    ;;
  --)
    shift
    break
    ;;
  *)
    printf >&2 -- '%s\n' '!ERR!'
    exit 2
    ;;
  esac
done
ARG_NUM=$#

print_path() {
  printf -- '%s' "$PATH"
}

print_err() {
  print_path
  printf >&2 -- 'paths {show, add, rm|remove, toggle} path\n'
  printf >&2 -- '%s\n' "$1"
  exit 1
}

check_arg() {
  if [[ $ARG_NUM -ne 2 ]]; then
    print_err 'ERR! -- # of arguments'
  fi
}

show() {
  print_path
  print_path | awk -v 'RS=:' '!seen[$0]++' >&2
}

p_relative() {
  local -- target="$1"
  if ((RELATIVE)); then
    printf -- '%s' "$PWD/$target"
  else
    printf -- '%s' "$target"
  fi
}

remove() {
  local -- target="$1"
  local -- silent="$2"

  local -- acc=()
  local -- arr
  readarray -t -d ':' -- arr < <(print_path)
  for path in "${arr[@]}"; do
    if [[ "$path" != "$target" ]]; then
      acc+=("$path")
    fi
  done
  IFS=':'
  local -- ret="${acc[*]}"
  unset -- IFS
  printf -- '%q' "$ret"

  if ! ((silent)); then
    printf >&2 -- '%s\n' "REMOVED -- $target"
  fi
}

add() {
  local -- target="$1"
  local -- silent="$2"

  if [[ -d "$target" ]]; then
    printf -- '%q' "$target:$(remove "$target" 1)"
    if ! ((silent)); then
      printf >&2 -- '%s\n' "ADDED   -- $target"
    fi
  else
    print_err "ERR! -- Not a Directory: $target"
  fi
}

toggle() {
  local -- target="$1"
  local -- silent="$2"

  local -- found=0
  local -- arr
  readarray -t -d ':' -- arr < <(print_path)
  for path in "${arr[@]}"; do
    if [[ "$path" == "$target" ]]; then
      found=1
      break
    fi
  done

  if ((found)); then
    remove "$target" "$silent"
  else
    add "$target" "$silent"
  fi
}

if [[ $ARG_NUM -lt 1 ]]; then
  print_err 'ERR! -- # of arguments'
fi
ACTION="$1"
case "$ACTION" in
show)
  show
  ;;
add)
  check_arg
  target="$(realpath -- "$2")"
  add "$target" "$SILENT"
  ;;
rm | remove)
  check_arg
  target="$(realpath -- "$2")"
  remove "$target" "$SILENT"
  ;;
toggle)
  check_arg
  target="$(realpath -- "$2")"
  toggle "$target" "$SILENT"
  ;;
*)
  print_err 'ERR! -- Must be one of ^'
  exit 2
  ;;
esac
