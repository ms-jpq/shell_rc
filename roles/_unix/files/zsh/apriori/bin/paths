#!/usr/bin/env bash

set -eu
set -o pipefail
shopt -s globstar nullglob


OPTS='sr'
LONG_OPTS='silent,relative'

PARSED="$(getopt --options="$OPTS", --longoptions="$LONG_OPTS" --name="$0" -- "$@")"
eval set -- "$PARSED"

SILENT=0
RELATIVE=0

while true
do
  case "$1" in
    -r|--relative)
      RELATIVE=1
      shift
      ;;
    -s|--silent)
      SILENT=1
      shift
      ;;
    --)
      shift
      break
      ;;
    *)
      >&2 printf '%s\n' '!ERR!'
      exit 2
      ;;
  esac
done
ARG_NUM=$#


print_err() {
  printf '%s' "$PATH"
  >&2 printf 'paths {show, add, rm|remove, toggle} path\n'
  >&2 printf '%s\n' "$1"
  exit 1
}


check_arg() {
  if [[ $ARG_NUM -ne 2 ]]
  then
    print_err 'ERR! -- # of arguments'
  fi
}


show() {
  printf '%s' "$PATH"
  {
    local arr
    readarray -t -d ':' arr <<< "$PATH"
    printf '%s\n' "${arr[@]}"
  } | awk '!seen[$0]++' >&2
}


p_relative() {
  local target="$1"
  if [[ "$RELATIVE" -eq 0 ]]
  then
    printf '%s' "$target"
  else
    printf '%s' "$PWD/$target"
  fi
}


remove() {
  local target="$1"
  local silent="$2"

  local acc=()
  local arr
  readarray -t -d ':' arr <<< "$PATH"
  for path in "${arr[@]}"
  do
    if [[ "$path" != "$target" ]]
    then
      acc+=("$path")
    fi
  done
  local save_ifs="$IFS"
  IFS=':'
  local ret="${acc[*]}"
  IFS="$save_ifs"
  printf '%s' "$ret"

  if [[ "$silent" -eq 0 ]]
  then
    >&2 printf '%s\n' "REMOVED -- $target"
  fi
}


add() {
  local target="$1"
  local silent="$2"

  if [[ -d "$target" ]]
  then
    printf '%s' "$target:$(remove "$target" 1)"
    if [[ "$silent" -eq 0 ]]
    then
      >&2 printf '%s\n' "ADDED   -- $target"
    fi
  else
    print_err "ERR! -- Not a Directory: $target"
  fi
}


toggle() {
  local target="$1"
  local silent="$2"

  local found=0
  local arr
  readarray -t -d ':' arr <<< "$PATH"
  for path in "${arr[@]}"
  do
    if [[ "$path" == "$target" ]]
    then
      found=1
      break
    fi
  done

  if [[ "$found" -eq 0 ]]
  then
    add "$target" "$silent"
  else
    remove "$target" "$silent"
  fi
}


if [[ $ARG_NUM -lt 1 ]]
then
  print_err 'ERR! -- # of arguments'
fi
ACTION="$1"
case "$ACTION" in
  show)
    show
    ;;
  add)
    check_arg
    target="$(p_relative "$2")"
    add "$target" "$SILENT"
    ;;
  rm|remove)
    check_arg
    target="$(p_relative "$2")"
    remove "$target" "$SILENT"
    ;;
  toggle)
    check_arg
    target="$(p_relative "$2")"
    toggle "$target" "$SILENT"
    ;;
  *)
    print_err 'ERR! -- Must be one of ^'
    exit 2
    ;;
esac
