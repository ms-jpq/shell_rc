#!/usr/bin/env python3

from argparse import ArgumentParser, Namespace
from configparser import ConfigParser
from itertools import chain, repeat
from os import environ, execle, linesep
from os.path import normcase
from pathlib import Path, PurePath
from re import compile
from shlex import quote, shlex, split
from shutil import which
from string import Template
from sys import stderr
from typing import Iterable, Iterator, Mapping, MutableMapping, Sequence, Tuple
from uuid import uuid4


def _parse(text: str) -> Iterator[Tuple[str, str]]:
    class _Parser(ConfigParser):
        def optionxform(self, optionstr: str) -> str:
            return optionstr

    lines = "".join(chain((f"[{uuid4()}]", linesep), text))
    parser = _Parser(allow_no_value=True, strict=False, interpolation=None)
    parser.read_string(lines)
    for section in parser.values():
        yield from section.items()


def _subst(val: str, env: Mapping[str, str]) -> str:
    def cont() -> Iterator[str]:
        lex = shlex(val)
        lex.whitespace = ""
        lex.whitespace_split = True
        for token in lex:
            if token.startswith("'") and token.endswith("'"):
                yield token[1:-1]
            elif token.startswith('"') and token.endswith('"'):
                yield Template(token[1:-1]).substitute(env)
            else:
                yield Template(token).substitute(env)

    return "".join(cont())


def _trans(
    stream: Iterable[Tuple[str, str]], env: Mapping[str, str]
) -> Mapping[str, str]:
    re = compile(r"^\w*$")

    seen: MutableMapping[str, str] = {}
    for key, val in stream:
        if key not in env and re.match(key):
            seen[key] = _subst(val, env={**seen, **env})

    return seen


def _arg_parse() -> Tuple[Namespace, Sequence[str]]:
    parser = ArgumentParser(add_help=False)
    parser.add_argument("path", type=PurePath)
    parser.add_argument("cmd")
    return parser.parse_known_args()


def main() -> None:
    args, argv = _arg_parse()

    env_path = Path(args.path)
    dotenv = "" if env_path == PurePath("-") else env_path.read_text()
    p_env = {**environ}
    env = _trans(_parse(dotenv), env=p_env)
    c_env = {**env, **p_env}

    lines = zip((f"{key}={quote(val)}" for key, val in env.items()), repeat(linesep))
    stderr.writelines(chain.from_iterable(lines))

    if cmd := which(args.cmd):
        execle(cmd, normcase(cmd), *argv, c_env)
    else:
        raise OSError(args.cmd)


main()
