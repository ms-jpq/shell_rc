#!/usr/bin/env python3

from argparse import ArgumentParser, Namespace
from configparser import ConfigParser
from itertools import chain, repeat
from os import environ, execle, linesep
from os.path import normcase
from pathlib import Path
from re import compile
from shlex import quote, split
from shutil import which
from string import Template
from sys import stderr
from typing import Iterable, Iterator, Mapping, Sequence, Tuple
from uuid import uuid4


def _parse(text: str) -> Iterator[Tuple[str, str]]:
    class _Parser(ConfigParser):
        def optionxform(self, optionstr: str) -> str:
            return optionstr

    lines = "".join(chain((f"[{uuid4()}]", linesep), text))
    parser = _Parser(allow_no_value=True, strict=False, interpolation=None)
    parser.read_string(lines)
    for section in parser.values():
        yield from section.items()


def _trans(
    stream: Iterable[Tuple[str, str]], environ: Mapping[str, str]
) -> Mapping[str, str]:
    def cont() -> Iterator[Tuple[str, str]]:
        re = compile(r"^[A-z][\w]*$")
        seen = {**environ}
        for key, val in stream:
            if re.match(key):
                if parts := split(val):
                    part, *_ = parts
                    tpl = Template(part)
                    seen[key] = rhs = tpl.substitute(seen)
                    yield key, rhs

    env = {key: val for key, val in cont()}
    return env


def _arg_parse() -> Tuple[Namespace, Sequence[str]]:
    parser = ArgumentParser(add_help=False)
    parser.add_argument("path", type=Path)
    parser.add_argument("cmd")
    return parser.parse_known_args()


def main() -> None:
    args, argv = _arg_parse()

    dotenv = Path(args.path).read_text()
    p_env = {**environ}
    env = _trans(_parse(dotenv), environ=p_env)
    c_env = {**env, **p_env}

    lines = zip((f"{key}={quote(val)}" for key, val in env.items()), repeat(linesep))
    stderr.writelines(chain.from_iterable(lines))

    if cmd := which(args.cmd):
        execle(cmd, normcase(cmd), *argv, c_env)
    else:
        raise OSError(args.cmd)


main()
