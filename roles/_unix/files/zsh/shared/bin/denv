#!/usr/bin/env python3

from argparse import ArgumentParser, Namespace
from configparser import ConfigParser
from itertools import chain
from json import dumps
from locale import strxfrm
from logging import INFO, StreamHandler, getLogger
from os import environ, execle, linesep
from os.path import normcase
from pathlib import Path, PurePath
from re import compile
from shlex import shlex
from shutil import which
from string import Template
from sys import exit
from typing import (
    Iterable,
    Iterator,
    Mapping,
    MutableMapping,
    MutableSequence,
    Sequence,
    Tuple,
)
from uuid import uuid4

log = getLogger()
log.setLevel(INFO)
log.addHandler(StreamHandler())


def _parse(text: str) -> Iterator[Tuple[str, str]]:
    class _Parser(ConfigParser):
        def optionxform(self, optionstr: str) -> str:
            return optionstr

    lines = "".join(chain((f"[{uuid4()}]", linesep), text))
    parser = _Parser(allow_no_value=True, strict=False, interpolation=None)
    parser.read_string(lines)
    for section in parser.values():
        yield from section.items()


def _subst(val: str, env: Mapping[str, str]) -> str:
    def cont() -> Iterator[str]:
        lex = shlex(
            val.encode().decode("unicode_escape"),
            posix=True,
        )
        lex.whitespace = ""
        tmp: MutableSequence[str] = []

        for token in lex:
            if token.isspace():
                yield Template("".join(tmp)).substitute(env)
                tmp.clear()
                yield token
            else:
                tmp.append(token)

        yield Template("".join(tmp)).substitute(env)

    try:
        return "".join(cont())
    except (KeyError, ValueError) as e:
        log.error(
            f"> %s{linesep}%s",
            e,
            dumps(val, ensure_ascii=False),
        )
        exit(True)


def _trans(
    stream: Iterable[Tuple[str, str]], env: Mapping[str, str]
) -> Mapping[str, str]:
    re = compile(r"^\w*$")

    seen: MutableMapping[str, str] = {}
    for key, val in stream:
        if key not in env and re.match(key):
            seen[key] = _subst(val, env={**seen, **env})

    return seen


def _print(env: Mapping[str, str]):
    def cont() -> Iterable[str]:
        ordered = sorted(env.items(), key=lambda kv: tuple(map(strxfrm, kv)))
        for key, val in ordered:
            rhs = dumps(val, ensure_ascii=False)
            yield f"{key}={rhs}"

    log.info("%s", linesep.join(cont()))


def _arg_parse() -> Tuple[Namespace, Sequence[str]]:
    parser = ArgumentParser(add_help=False)
    parser.add_argument("path", type=PurePath)
    parser.add_argument("cmd")
    return parser.parse_known_args()


def main() -> None:
    args, argv = _arg_parse()

    env_path = Path(args.path)
    dotenv = "" if env_path == PurePath("-") else env_path.read_text()

    p_env = {**environ}
    env = _trans(_parse(dotenv), env=p_env)

    _print(env)
    if cmd := which(args.cmd):
        execle(cmd, normcase(cmd), *argv, {**env, **p_env})
    else:
        raise OSError(args.cmd)


main()
