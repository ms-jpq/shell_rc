#!/usr/bin/env node

const assert = require("assert");
const { spawnSync } = require("child_process");
const { existsSync, mkdirSync } = require("fs");
const { basename, delimiter, dirname, join } = require("path");
const { argv } = require("process");

const [, filename, ...args] = argv;
const [parent, npm] = [dirname(filename), basename(filename)];

process.env["PATH"] = process.env["PATH"]
  .split(delimiter)
  .filter((p) => p !== parent)
  .join(delimiter);

const global_home = process.env["NPM_GLOBAL_HOME"];
assert(global_home);

const install_set = new Set([
  "add",
  "i",
  "in",
  "ins",
  "inst",
  "insta",
  "instal",
  "install",
  "isnt",
  "isnta",
  "isntal",
]);
const global_set = new Set(["--global", "-g"]);

const command = args[0];
const is_install = install_set.has(command);
const is_global = args.some((arg) => global_set.has(arg));
const is_global_install = is_install && is_global;

const cwd = is_global_install ? global_home : process.cwd();
const new_args = (() => {
  if (is_global_install) {
    return args.filter((arg) => !global_set.has(arg));
  } else {
    return args;
  }
})();

if (is_global_install) {
  if (!existsSync(global_home)) {
    mkdirSync(global_home, { recursive: true });
  }
  const packages = join(global_home, "package.json");
  if (!existsSync(packages)) {
    spawnSync(npm, ["init", "-y"], {
      cwd,
      stdio: "inherit",
    });
  }
  console.log("-".repeat(process.stdout.columns));
  console.log(`@ - ${packages} - @`);
  console.log("-".repeat(process.stdout.columns));
}

const { status } = spawnSync(npm, [...new_args], {
  cwd,
  stdio: "inherit",
});
process.exitCode = status;
