#!/usr/bin/env node

const { ok } = require("assert");
const { spawnSync } = require("child_process");
const { log } = require("console");
const { existsSync, mkdirSync } = require("fs");
const { basename, delimiter, dirname, join } = require("path");
const {
  argv,
  cwd,
  stdout: { columns },
} = require("process");

const [, filename, ...args] = argv;
const [command] = args;
const [parent, npm] = [dirname(filename), basename(filename)];

process.env["PATH"] = process.env["PATH"]
  .split(delimiter)
  .filter((p) => p !== parent)
  .join(delimiter);

const global_home = process.env["NPM_GLOBAL_HOME"];
ok(global_home);

const is_global_install = (() => {
  const install_set = new Set([
    "add",
    "i",
    "in",
    "ins",
    "inst",
    "insta",
    "instal",
    "install",
    "isnt",
    "isnta",
    "isntal",
  ]);
  const global_set = new Set(["--global", "-g"]);

  const is_install = install_set.has(command);
  const is_global = args.some((arg) => global_set.has(arg));
  return is_install && is_global;
})();

const new_cwd = is_global_install ? global_home : cwd();
const new_args = (() => {
  if (is_global_install) {
    return args.filter((arg) => !global_set.has(arg));
  } else {
    return args;
  }
})();

if (is_global_install) {
  if (!existsSync(global_home)) {
    mkdirSync(global_home, { recursive: true });
  }
  const packages = join(global_home, "package.json");
  if (!existsSync(packages)) {
    const { status } = spawnSync(npm, ["init", "-y"], {
      cwd: new_cwd,
      stdio: "inherit",
    });
  }
  ok(status == 0);
  log("-".repeat(columns));
  log(`@ - ${packages} - @`);
  log("-".repeat(columns));
}

const { status } = spawnSync(npm, [...new_args], {
  cwd: new_cwd,
  stdio: "inherit",
});
process.exitCode = status;
