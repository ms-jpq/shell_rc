# frozen_string_literal: true

IRB.conf[:HISTORY_FILE] = File.join(
  ENV.fetch('XDG_STATE_HOME'),
  'shell_history',
  'irb'
)
# IRB.conf[:USE_COLORIZE] = false
IRB.conf[:USE_AUTOCOMPLETE] = false

%w[
  English
  base64
  bigdecimal
  cgi
  date
  digest
  erb
  etc
  fcntl
  fiber
  fileutils
  io/console
  ipaddr
  json
  logger
  net/http
  open3
  openssl
  optparse
  ostruct
  pathname
  pp
  securerandom
  set
  shellwords
  socket
  stringio
  syslog
  tempfile
  thread
  time
  tsort
  uri
  yaml
].each { require(_1) }

module Kernel
  def clear! = system(*%w[clear --], exception: true) unless respond_to?(:clear!)
  def methods! = (methods - Object.methods).sort unless respond_to?(:methods!)
  def own_methods! = (methods - self.class.superclass.instance_methods).sort unless respond_to?(:own_methods!)

  unless respond_to?(:assert!)
    def assert!(c, m = nil, &msg)
      raise(msg&.call || m) unless c

      c
    end
  end
end

class Module
  unless instance_methods.include?(:edit!)
    def edit!
      case Object.const_source_location(name)
      in []
        warn(inspect)
      in [path, lineno]
        system(*ENV.fetch('EDITOR').shellsplit, "#{path}:#{lineno}")
      end
    end
  end
end

class Class
  unless instance_methods.include?(:edit!)
    def edit!
      case Object.const_source_location(name)
      in []
        warn(inspect)
      in [path, lineno]
        system(*ENV.fetch('EDITOR').shellsplit, "#{path}:#{lineno}")
      end
    end
  end
end

class Method
  unless instance_methods.include?(:edit!)
    def edit!
      source_location => [path, lineno]
      if File.file?(path.to_s)
        system(*ENV.fetch('EDITOR').shellsplit, "#{path}:#{lineno}")
      else
        warn(inspect)
      end
    end
  end
end
