#!/usr/bin/env python3

from argparse import ArgumentParser, Namespace
from asyncio import run
from asyncio.subprocess import create_subprocess_exec
from asyncio.tasks import gather
from contextlib import suppress
from itertools import chain
from logging import INFO, StreamHandler, getLogger
from shlex import join
from shutil import which
from socket import SO_REUSEADDR, SOL_SOCKET, AddressFamily, SocketKind, socket
from sys import exit
from typing import Iterable, Iterator, Sequence, Tuple
from urllib.parse import urlsplit

log = getLogger()
log.setLevel(INFO)
log.addHandler(StreamHandler())


def _parse_args() -> Tuple[Namespace, Sequence[str]]:
    parser = ArgumentParser()
    parser.add_argument("-J", "--jump", nargs="+", required=True)
    return parser.parse_known_args()


def _jumps(jumps: Iterable[str]) -> Iterator[Tuple[str, str, int]]:
    for idx, jump in enumerate(jumps):
        uri = urlsplit(f"ssh://{jump}")
        user, host = uri.username, uri.hostname
        port = uri.port or (443 if not idx else 22)
        assert user and host
        yield user, host, port


def _free_port() -> int:
    with socket(AddressFamily.AF_INET6, type=SocketKind.SOCK_STREAM) as sock:
        sock.setsockopt(SOL_SOCKET, SO_REUSEADDR, True)
        sock.bind(("localhost", 0))
        _, port, *_ = sock.getsockname()
        return port


async def _run(arg0: str, *argv: str) -> None:
    a0 = which(arg0)
    assert a0

    log.info("%s", join((a0, *argv)))
    proc = await create_subprocess_exec(a0, *argv)
    try:
        code = await proc.wait()
        exit(code)
    finally:
        with suppress(ProcessLookupError):
            proc.kill()
        await proc.wait()


async def main() -> None:
    args, argv = _parse_args()

    (user, host, port), *jumps = _jumps(args.jump)
    local_port = _free_port()

    c1 = _run(
        "socat",
        f"TCP-LISTEN:{local_port},fork,reuseaddr",
        f"OPENSSL:{host}:{port},verify=0",
    )
    c2 = _run(
        "ssh",
        "-J",
        ",".join(
            chain(
                (f"{user}@localhost:{local_port}",),
                (f"{u}@{h}:{p}" for u, h, p in jumps),
            )
        ),
        *argv,
    )

    await gather(c1, c2)


run(main())
